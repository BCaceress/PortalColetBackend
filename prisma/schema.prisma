// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // Removing custom output path to use the default location
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id_usuario  Int      @id @default(autoincrement())
  nome        String
  email       String   @unique
  senha       String
  funcao      String
  rats        RAT[]

  @@map("usuarios")
}

model RAT {
  id_rat                Int       @id @default(autoincrement())
  ds_status             String
  fl_deslocamento       String    // 'S' ou 'N'
  dt_data_hora_entrada  DateTime
  dt_data_hora_saida    DateTime
  tm_duracao            String    // Alterado de DateTime @db.Time() para String
  tx_comentario_interno String    // Textarea comment
  ds_originada          String
  ds_observacao         String
  nr_km_ida             Int?
  nr_km_volta           Int?
  nr_valor_pedagio      Float?
  tx_atividades         String    // Textarea comment
  tx_tarefas            String    // Textarea comment
  tx_pendencias         String    // Textarea comment

  id_usuario            Int
  usuario               Usuario   @relation(fields: [id_usuario], references: [id_usuario])
  
  id_cliente            Int
  cliente               Cliente   @relation(fields: [id_cliente], references: [id_cliente])
  
  id_contato            Int
  contato               Contato   @relation(fields: [id_contato], references: [id_contato])

  @@index([id_usuario])
  @@index([id_cliente])
  @@index([id_contato])
  @@map("rats")
}

model Cliente {
  id_cliente            Int       @id @default(autoincrement())
  fl_ativo              Boolean
  ds_nome               String
  ds_razao_social       String
  nr_cnpj               String
  nr_inscricao_estadual String
  ds_site               String?
  ds_endereco           String
  ds_cep                String
  ds_uf                 String
  ds_cidade             String
  ds_bairro             String
  nr_numero             String
  ds_complemento        String?
  nr_codigo_ibge        String?
  nr_latitude           Float?
  nr_longitude          Float?
  nr_distancia_km       Float?
  tx_observacao_ident   String?
  fl_matriz             Boolean
  ds_situacao           String
  ds_sistema            String
  ds_contrato           String
  nr_nomeados           Int
  nr_simultaneos        Int
  nr_tecnica_remoto     Float?
  nr_tecnica_presencial Float?
  tm_minimo_horas       String    // Alterado de DateTime @db.Time() para String
  ds_diario_viagem      String
  ds_regiao             String
  tx_observacao_contrato String
  nr_codigo_zz          Int
  nr_franquia_nf        Float
  nr_qtde_documentos    Int
  nr_valor_franqia      Float
  nr_valor_excendente   Float
  dt_data_contrato      DateTime  @db.Date()
  
  clientesContatos      ClienteContato[]
  emails                EmailCliente[]
  rats                  RAT[]

  @@map("clientes")
}

model Contato {
  id_contato            Int       @id @default(autoincrement())
  ds_nome               String
  ds_cargo              String
  fl_ativo              Boolean
  tx_observacoes        String?
  ds_email              String
  ds_telefone           String
  fl_whatsapp           Boolean
  
  clientesContatos      ClienteContato[]
  rats                  RAT[]

  @@map("contatos")
}

// Junction table for many-to-many relationship between Cliente and Contato
model ClienteContato {
  id                    Int       @id @default(autoincrement())
  
  id_cliente            Int
  cliente               Cliente   @relation(fields: [id_cliente], references: [id_cliente])
  
  id_contato            Int
  contato               Contato   @relation(fields: [id_contato], references: [id_contato])

  @@unique([id_cliente, id_contato], name: "id_cliente_id_contato")
  @@index([id_cliente])
  @@index([id_contato])
  @@map("clientes_contatos")
}

model EmailCliente {
  id                    Int       @id @default(autoincrement())
  ds_email              String
  
  id_cliente            Int
  cliente               Cliente   @relation(fields: [id_cliente], references: [id_cliente])

  @@index([id_cliente])
  @@map("emails_cliente")
}
